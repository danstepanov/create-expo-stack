import * as NavigationBar from 'expo-navigation-bar';
import { useColorScheme as useNativewindColorScheme } from 'nativewind';
import * as React from 'react';

import { COLORS } from '~/theme/colors';

export function useColorScheme() {
  const {
    colorScheme,
    setColorScheme: setNativeWindColorScheme,
    toggleColorScheme,
  } = useNativewindColorScheme();

  React.useEffect(() => {
    setNavigationBar(colorScheme ?? 'light').catch((error) => {
      console.log('useColorScheme.android.tsx", "useEffect', error);
    });
  }, []);

  async function setColorScheme(colorScheme: 'light' | 'dark') {
    setNativeWindColorScheme(colorScheme);
    try {
      await setNavigationBar(colorScheme);
    } catch (error) {
      console.log('useColorScheme.android.tsx", "setColorScheme', error);
    }
  }

  return {
    colorScheme: colorScheme ?? 'light',
    isDarkColorScheme: colorScheme === 'dark',
    setColorScheme,
    toggleColorScheme,
    colors: COLORS[colorScheme ?? 'light'],
  };
}

function setNavigationBar(colorScheme: 'light' | 'dark') {
  return Promise.all([
    NavigationBar.setButtonStyleAsync(colorScheme === 'dark' ? 'light' : 'dark'),
    NavigationBar.setPositionAsync('absolute'),
    NavigationBar.setBackgroundColorAsync(colorScheme === 'dark' ? '#00000080' : '#ffffff80'),
  ]);
}
